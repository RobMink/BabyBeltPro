##########################################################
#                        MACROS                          #
##########################################################

[gcode_macro PRINT_START]
# Reference https://github.com/KevinOConnor/klipper/blob/master/docs/Config_Reference.md#gcode_macro
# On how to override default parameters
#default_parameter_BED_TEMP: 60
#default_parameter_EXTRUDER_TEMP: 200
gcode:
  {% set BED = params.BED|int %}
  {% set EXTRUDER = params.EXTRUDER|int %}
  {% set MATERIAL = params.MATERIAL|string %}
  {% set ANGLE = params.ANGLE|string %}

  SET_GCODE_VARIABLE MACRO=Y_ANGLE VARIABLE=angle VALUE={ANGLE}
  
  #MOTION_SENSOR ENABLE=0		; uncomment to disable encoder_sensor until reactivated
  
  VALIDATE_ANGLE    

  {% if printer["gcode_macro VALIDATE_ANGLE"].validation_error == 0 %}

    RESPOND PREFIX="Home All"
    G28 ; home all axis

    M104 S150                      ; preheat nozzle to 150C
    M117 Heating Bed
    M190 S{BED}                    ; heat bed
    
    RESPOND PREFIX="Home Y"
    G28 Y

    M117 Heating Nozzle
    M104 S{EXTRUDER}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER}               ; heat nozzle
    M190 S{BED}                    ; confirm bed temperature
    M117 ;Clear message
  
    NOZZLE_PRIME

    G21 ; set units to millimeters
    G90 ; use absolute coordinates
    M83 ; use relative distances for extrusion

    #UPDATE_DELAYED_GCODE ID=ENABLE_MOTION_SENSOR DURATION=60			; uncomment to avoid false positive on encoder_sensor at start of print
  {% else %}
    CANCEL_PRINT
  {% endif %}

[gcode_macro PRINT_END]
gcode: 

  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  M400                           ; wait for buffer to clear
  SAFE_RETRACT
  TURN_OFF_HEATERS
  SAFE_PARK
  M107                          ; turn off fan
  M84						    ; Disable steppers
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END
  M117 						;Clear the messages

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  SAVE_GCODE_STATE NAME=print_pause
  PAUSE_BASE
  #SAFE_RETRACT
  SAFE_PARK
  RESTORE_GCODE_STATE NAME=print_pause

[gcode_macro SAFE_RETRACT]
gcode: 
  {% set min_temp = printer.configfile.config.extruder.min_extrude_temp|default(170)|float %}

  # Only do retraction moves if temperature is high enough
  {% if  printer.extruder.temperature >= min_temp %}
    G92 E0                         ; zero the extruder
    G1 E-10.0 F1800                ; retract filament
  {% else %}
    RESPOND PREFIX="Notice: Skipping retraction - temperature too low ({ printer.extruder.temperature }°C)"
  {% endif %}

[gcode_macro SAFE_EXTRUDE]
gcode: 
  {% set min_temp = printer.configfile.config.extruder.min_extrude_temp|default(170)|float %}

  # Only do extrude moves if temperature is high enough
  {% if  printer.extruder.temperature >= min_temp %}
    G92 E0                         ; zero the extruder
    G1 E+10.0 F1800                ; extrude filament
  {% else %}
    RESPOND PREFIX="Notice: Skipping extrusion - temperature too low ({ printer.extruder.temperature }°C)"
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {% else %}
    {% set get_params = "" %}
  {% endif %}
  #SAFE_EXTRUDE
  RESTORE_GCODE_STATE NAME=print_pause MOVE=1
  RESUME_BASE {get_params}

[gcode_macro SAFE_PARK]
description: 
gcode:
  {% set th = printer.toolhead %}
  # safe anti-stringing move coords
  {% set x_safe = th.position.x + 10 * (1 if th.axis_maximum.x - th.position.x > 10 else -1) %}
  {% set y_safe = th.position.y + 10 * (1 if th.axis_maximum.y - th.position.y > 10 else -1) %}
  # Check to see if the axes are homed (preventing error messages if we cancelled a print.)
  {% if "xyz" not in printer.toolhead.homed_axes %}
    RESPOND PREFIX="Notice: Printer is not homed, skipping PRINT_END Movements."
  {% else %}
    G91                            ; relative mode
    G0 Z10 Y05 F3000                   ; Advance the belt 10mm to move the part away from the nozzle
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x/2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
  {% endif %}

[pause_resume]
recover_velocity: 50.

[gcode_macro LOAD_FILAMENT]
gcode:
  G91                            ; relative mode
  G1 E450 F2200                   ; load 450mm of filament @ 36mm/sec to feed through gears to hotend
  G1 E20 F500                    ; load 20mm of filament @ 8mm/sec to prime nozzle
  G1 E-10 F500                    ; retract 10mm to inhibit oozing
  G90                           ; absolute mode

[gcode_macro UNLOAD_FILAMENT]
gcode:
  G91                            ; relative mode
  G1 E10 F180                    ; load 10mm of filament @ 3mm/sec to prime nozzle
  G1 E-20 F1500                   ; retract 20mm at 25mm/sec to try to form a normal tip
  G4 P10000                       ; wait 10 seconds for the filament to cool down
  G1 E-500 F2200                 ; retract 500mm at 36mm/sec  
  G90                           ; absolute mode

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  M117 PRINT CANCELLED
  SAVE_GCODE_STATE NAME=STATE_PRINT_CANCEL
  M400                           ; wait for buffer to clear
  TURN_OFF_HEATERS
  SAFE_PARK
  M107                                     ; turn off fan
  M84						    # Disable steppers
  RESTORE_GCODE_STATE NAME=STATE_PRINT_CANCEL
  CLEAR_PAUSE
  BASE_CANCEL_PRINT

[gcode_macro EJECT_PRINT]
description: Ejects the print from the belt by moving to X0, Y100, and advancing belt by 100mm
gcode:
  G90                      ; Set absolute positioning
  G1 X0 Y100 F3000        ; Move X to 0 and Y to 100mm
  G91                      ; Set relative positioning
  G1 Z100 F1200           ; Advance belt by 100mm
  G90 Z0                  ; Reset Z to 0
  G90                           ; absolute mode

[gcode_macro _SET_HOMING_CURRENT]
variable_stored_current: 0
gcode:
  {% set current = printer["tmc2209 stepper_y"].run_current %}
  # Store the current value
  SET_GCODE_VARIABLE MACRO=_SET_HOMING_CURRENT VARIABLE=stored_current VALUE={current}
    
  # Log the stored current
  {action_respond_info("Stored stepper_y current: %.2f" % current)}
    
  # Set higher current for homing
  {% set RUN_CURRENT = params.CURRENT|default(0.35)|float %}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT}
  # Wait a moment to let current settle
  G4 P1000  # Pause for 1 second

[gcode_macro _RESTORE_RUN_CURRENT]
gcode:
  # Log the current we're restoring to
  {% set stored = printer["gcode_macro _SET_HOMING_CURRENT"].stored_current %}
  {action_respond_info("Restoring stepper_y current to: %.2f" % stored)}
    
  # Restore the saved current
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={stored}
  # Wait a moment to let current settle
  G4 P1000  # Pause for 1 second

[gcode_macro NOZZLE_PRIME]
description: Purge nozzle at the start of the print, for 0.4mm nozzle
variable_y_startheight: 15
gcode:
  {% set rand = range(0, (printer.toolhead.axis_maximum.x|int  - 1))|random %}
  {action_respond_info("NOZZLE_PRIME fuzzy Coord(x={0})".format(rand))}
  {% set fan_speed = printer.fan.speed %}
  G90                      ; Set absolute positioning
  G0 X{rand} Y{y_startheight} F3000
  M106 SPEED=1.0
  SAFE_EXTRUDE
  G90                      ; Set absolute positioning
  M83  
  G0 E10 Y0 Z8 F300
  G91                      ; Set relative positioning
  G0 Z+30 E+50 F150 		; intro line
  G0 Y+15 Z+15 F3000 		;Move Y axis up & retract
  G90                      ; Set absolute positioning
  G92 E0                  ; Reset extruder
  G92 Z0                  ; Reset Z position
  PART_COOLING SPEED={(fan_speed * 255)|round|int}

[gcode_macro COOL_DOWN]
gcode:
  M104 S0 ; Turn off hotend
  M140 S0 ; Turn off bed
  M107    ; Turn off fan

[gcode_macro Y_ANGLE]
variable_state: "30"
variable_angle: "0"
gcode:
  RESPOND PREFIX="Y Angle is: {state}"  

[gcode_macro VALIDATE_ANGLE]
description: Validate 30/45 angle
variable_validation_error: 0
gcode:
  {% set y_angle_state = printer["gcode_macro Y_ANGLE"].state|string %}
  {% set requested_angle = printer["gcode_macro Y_ANGLE"].angle|string %}

  #Uncomment the line below if you need to see the values and troubleshoot
  #RESPOND PREFIX="Debug - Y_angle_state: '{y_angle_state}' requested: '{requested_angle}'"
    
  {% if y_angle_state == requested_angle %}
    M117 Angle Verified... Continuing to Print!
    RESPOND PREFIX="Angle Verified... Continuing to Print!"
  {% else %}
    RESPOND PREFIX="Your Angle is set to {y_angle_state}, but you sliced for {requested_angle}"
    SET_GCODE_VARIABLE MACRO=VALIDATE_ANGLE VARIABLE=validation_error VALUE=1
  {% endif %}    